===============
Back MPTT based: 
TODO: banned, body deleted comment save(?)* 
===============
Comment model:   user-idea-body-reply_to(user)-banned-deleted

MPTT UI in admin

model: 
sorted =  created_at (old on top)

url: need idea slug

view: ListAPIView         
sorted = created_at
qs = Comment.objects.filter(idea=idea).select_related('idea')
*if comment gets deleted |=> body="" && deleted=True* (record of deleted comment in db )


view: CreateModelMixin,UpdateModelMixin,DestroyModelMixin,RetrieveModelMixin,viewsets.GenericViewSet
author of comm or staff

serializer
('id','created_at','body','idea_id',
                'user_id','reply_to_id','parent','author_comment','deleted'

===============
Front:
===============
comments with parent = null => get left row
children                                 => get next row with outline (Insta-like)
if comment gets deleted |=> no render comment on front but placeholder in a chain

3 components:
Comments Comment CommentForm

решила отказаться от 2-х мерного массива в пользу одномерного (см сериализатор)

+: в т.ч. то, что не нужно искать,куда вставить отредактированный коммент 
идея одномерного массива в том, что может все комменты-дети отрендарить в отдельную
колонку и сортировать его по убыв-возраст по времени in js.
===============
Общая схема:
===============

Comments.vue= parent import CommentForm.vue(edit-delete func)
      import Commet.vue (child)
	import CommentForm.vue(edit-delete func)
essential feature: 
attr: activeComment,который позволяет отследить, какой коммент сейчас в работе,
чтобы все эти формочки не реагировали дружным открытием на event
but only target comment

в родителе:
1. происходит прокручивание отфильтрованных родительских комментов с в
импортированном компоненте Component, куда передаются динам аттр для props in Component
2. есть form для создания root comment
Comment.vue
1.отрисовывает компонент 
2. предоставляет функ-л для edit-elete-reply thx to CommentForm(child)
3. если в комп есть "ответы", то запускает сам себя для их render-га.
Итак CommentForm используется и в Comments , и в Comment для реализации различных задач 
=====================================================
Details:
=====================================================
1. Comments.vue
1.1 computed: fetches comments from vuex state and filter root commets
1.2 Реализует отрисовку комментов с parent = null in loop with getRootComms:
	in Comment.vue
1.3 renders form for creating new (root) comment and evt edit/delete func
data()
	{
	return {
		activeComponent: null/or smth dif
		cleanForm:false // serves form create root comment (req Ok|=> form clear)
	}
}

<app-comment 
                v-for="comment in getRootComms"
                :key="comment.id"
                :comment="comment"
                :parent-id="comment.id"
                :active-comment="activeComment"                
                :comments="comments"
                :depth=1
                @replyComment="replyComment"
                @updateComment="updateComment"
                @commEdit="handleEdit"
                @commReply="handleReply"
                @commDelete="handleDelete"
                @handleCancel="handleCancel"                
></app-comment> 
methods:
	handleEdit
	handleReply
	handleDelete
	handleCancel
are listening to child components (via Comment to CommentForm)
q: what is the user doing?

each of them adjust attr activeComponent and sends it back to Comment.vue
и это поределит, какая кнопка отразится на submit button in form
=================
Comment
==================
A. 
2 ways on top
comment not deleted                   comment deleted

если юзер == автор коммента, то у него есть меню: edit delete comment (triggers modal to confirm)
if comment not deleted:
3 options
editing       |=> import CommentForm with submitTitle=Edit
not editing |=> display comment body
replying     |=> import CommentForm with submitTitile=Reply
----------------------------------------------
B. if comment has replies
----------------------------------------------
getReplyId: this.parentId?this.parentId:this.comment.id

нужно в рекрсивный цикл добавлять исходные comments (vues state)
to form an array replies 

p.s. .getTime() built-in js he number of milliseconds* since the Unix Epoch

return this.comments.filter(comm=> comm.aprent==this.parentId).sort(a,b)=>
			new Date(a.created_at).getTime() - new Date(b.created_at).getTime()
      
computed:{
	indent() transform translate(depth*50)
see trick with depth 
parent Comments.vue depth =1
child Comment.vue     depth = 0
result: one indent 
=================
CommentForm
=================
3 options: Edit Reply addRootComm
в зависимости от этого будет собираться разная инфа для emit evet to parent comp(Comment/Comments)
new root comment: body + parent = null
edit  comment: body
reply: body + parentId



  




